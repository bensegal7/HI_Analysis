---
title: "A Data Driven Guide to Hawai'i on a Budget"
format: html
editor: visual
---

```{r setup, message=FALSE, warning=FALSE}
#| echo: false

#Loading all necessary libraries
library("tidyverse")
library("ggthemes")
library("scales")
library(leaflet)
library(writexl)
library(geosphere)
library("rsample")
library(car)
library("maps")
library("dplyr")
```

##### Ben Segal, MBA - July, 2025

```{r load, message=FALSE, warning=FALSE}
#| echo: false

dfaORG <- read_csv("data/dfhi.csv") %>% 
  mutate(high_booking = as.factor(high_booking))

df_locations <- read_csv("data/HI_locations.csv")

```

```{r clean, message=FALSE, warning=FALSE}
#| echo: false

# data cleaning/wrangling


# Cleaning to remove dollar sign

remove_dollar_sign <- c("weekly_price", "security_deposit", "price","monthly_price", "extra_people", "cleaning_fee")

dfa <-
  dfaORG %>%
  mutate_at(remove_dollar_sign, ~str_replace_all(., pattern="\\$", replacement="")) %>%
  mutate_at(remove_dollar_sign, ~str_replace_all(., pattern=",", replacement="")) %>%
  mutate_at(remove_dollar_sign, ~as.numeric(.))

# cleaning to remove pct symbol

remove_pct_sign <- c("host_response_rate")

df <-
  dfa %>%
  mutate_at(remove_pct_sign, ~str_replace_all(., pattern="\\%", replacement="")) %>%
  mutate_at(remove_pct_sign, ~as.numeric(.)) %>%
  mutate_at(remove_pct_sign, ~./100)

#Cleaning to log price, there is a huge right skew

df <- df %>%
  mutate(
    log_price = log(price)
     )

#cleaning other and n/a markets

df <- df %>%
  filter(! market %in% c("NA", "Other (Domestic)"), !is.na(market))

```

```{r features, message=FALSE, warning=FALSE}
#| echo: false
#Feature Creation

#renaming "Big Island" and "The Big Island" to "Big Island"

df <- df %>%
  mutate(
    market = str_trim(market),
    market = str_to_title(market),
    market = case_when(
      market == "The Big Island" ~ "Big Island",
      TRUE ~ market
    )
  )

#Merging with the landmarks dataset to create the "type" column

df <- df %>%
  rowwise() %>%
  mutate(
    type = {
      # Calculate distances to all locations
      distances <- distGeo(
        matrix(c(longitude, latitude), ncol = 2),
        matrix(c(df_locations$longitude, df_locations$latitude), ncol = 2)
      )
      # Extract the type of the closest location
      df_locations$type[which.min(distances)]
    }
  ) %>%
  ungroup()

#creating the distance to closest landmark column

df <- df %>%
  rowwise() %>%
  mutate(
    dist_to_landmark = {
      #Calculate distance (meters) to the nearest landmark for all listings
      distances <- distGeo(
        matrix(c(longitude, latitude), ncol = 2),
        matrix(c(df_locations$longitude, df_locations$latitude), ncol = 2)
      )
      min(distances, na.rm = TRUE)
    }
  )

#Trimming the dataset

quants <- quantile(df$price, c(0.01,0.99), na.rm = TRUE)

df_trim <- df %>%
  filter(price > 0, price >= quants[1], price <= quants[2]) %>%
  mutate(log_price = log(price))
```
